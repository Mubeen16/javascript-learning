

## 📦 JavaScript Variables: Final Summary (`var`, `let`, `const`)

### ✅ What are Variables?

Variables are used to **store data** in JavaScript — like names, numbers, or arrays.

---

### 🔑 Three Ways to Declare a Variable

| Keyword | Reassignable? | Redeclarable? | Scope    | Use Case                          |
| ------- | ------------- | ------------- | -------- | --------------------------------- |
| `var`   | ✅ Yes         | ✅ Yes         | Function | Old JS, avoid in modern code      |
| `let`   | ✅ Yes         | ❌ No          | Block    | Changing values (counters, flags) |
| `const` | ❌ No          | ❌ No          | Block    | Fixed values (API key, pi)        |

---

### 📘 1. `var` – Function Scoped

```js
var name = "Ali";
var name = "Mubeen"; // ✅ Redeclaration allowed
name = "Rafeeqe";     // ✅ Reassignment allowed
```

* ❗ Function scoped → leaks out of `if`, `for`, etc.
* ❌ Avoid in modern JavaScript unless working in legacy code

---

### 📘 2. `let` – Block Scoped

```js
let age = 25;
age = 26; // ✅ Reassignment allowed
// let age = 27; ❌ Error — no redeclaration in the same block
```

* ✅ Reassignment allowed
* 🔐 Block scoped → only works inside `{ }`

---

### 📘 3. `const` – Block Scoped Constant

```js
const country = "UK";
// country = "India"; ❌ Error — can't reassign
```

* ❌ No reassignment
* ❌ No redeclaration
* ✅ Must initialize immediately
* ⚠️ For **objects or arrays**, mutation is allowed:

```js
const person = { name: "Mubeen" };
person.name = "Ali"; // ✅ OK
```

---

### 📌 Naming Rules

* Must start with a letter, `_`, or `$`
* Case-sensitive: `Name` ≠ `name`
* No reserved words (`let`, `if`, `const`, etc.)

---

### 🧠 Key Concepts You Practiced

| Concept          | What You Learned                                               |
| ---------------- | -------------------------------------------------------------- |
| Scope            | `let` and `const` are block-scoped, `var` is function-scoped   |
| Reassignment     | Only `let` allows reassignment                                 |
| Const strictness | `const` can’t be changed, but internal array/object can mutate |
| Hoisting         | `var` is hoisted (weird behavior), `let`/`const` are not       |

---

### ✅ Real-World Best Practices

| Situation                         | Use     |
| --------------------------------- | ------- |
| Value won’t change (e.g. `pi`)    | `const` |
| Value will change (e.g. counters) | `let`   |
| Avoid for clean code              | `var`   |

---

## 🧾 Example You Can Add to `README.md`

```md
# Day 01 – JavaScript Variables

## Summary of var, let, and const

### var
- Function scoped
- Reassignable and redeclarable
- Hoisted
- Avoid in modern JS

### let
- Block scoped
- Reassignable but not redeclarable
- Preferred for variables that change

### const
- Block scoped
- Cannot be reassigned or redeclared
- Use for fixed values (e.g., PI, config)
- Allows internal changes for arrays/objects

### Personal Notes
- I now understand scope, reassignment, and the purpose of each keyword.
- I can confidently choose between `let` and `const` based on use case.
- I know to avoid `var` unless maintaining old code.

```

---

